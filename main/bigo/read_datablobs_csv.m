function datablobs = read_datablobs_csv(filename, startRow, endRow)
    %IMPORTFILE Import numeric data from a text file as a matrix.
    %   DATABLOBS = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
    %   default selection.
    %
    %   DATABLOBS = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
    %   STARTROW through ENDROW of text file FILENAME.
    %
    % Example:
    %   datablobs = importfile('datablobs.csv', 1, 3305);
    %
    %    See also TEXTSCAN.
    
    % Auto-generated by MATLAB on 2018/11/14 17:40:54
    
    %% Initialize variables.
    delimiter = ',';
    if nargin < 1
        filename = 'datablobs.csv';
    end
    if nargin < 2
        startRow = 1;
        endRow = inf;
    end
    
    %% Format string for each line of text:
    %   column1: double (%f)
    %	column2: double (%f)
    %   column3: double (%f)
    %	column4: text (%s)
    %   column5: double (%f)
    %	column6: double (%f)
    %   column7: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%f%f%s%f%f%f%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r');
    
    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this code. If
    % an error occurs for a different file, try regenerating the code from the
    % Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end
    
    %% Close the text file.
    fclose(fileID);
    
    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for unimportable
    % data, select unimportable cells in a file and regenerate the script.
    
    %% Create output variable
    datablobs = table(dataArray{1:end-1}, 'VariableNames', {'device_id','session_id','subsession_id','sensor_type','sensor_mode','start_utc_timestamp','start_local_timestamp'});
    
    %% LeBill
    s1 = 'InputVariables';
    s2 = 'OutputVariableNames';

    ec1 = rowfun(@unixt2matlab, datablobs, s1, 'start_utc_timestamp', s2, 'x');
    ec2 = rowfun(@unixt2matlab, datablobs, s1, 'start_local_timestamp', s2, 'x');
    
    datablobs.start_utc_timestamp = ec1.x;
    datablobs.start_local_timestamp = ec2.x;

    ec1 = rowfun(@ (x) cellstr(datestr(x)), datablobs, s1, 'start_utc_timestamp', s2, 'x');
    ec2 = rowfun(@ (x) cellstr(datestr(x)), datablobs, s1, 'start_local_timestamp', s2, 'x');
    
    datablobs.start_utc = ec1.x;
    datablobs.start_local= ec2.x;
    
    datablobs = datablobs(:, [1 2 3 4 5 8 9 6 7]);
end
