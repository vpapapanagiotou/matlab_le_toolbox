function location = read_location_csv(filename, startRow, endRow)
    %READ_LOCATION_CSV Read a 'location.csv' file into a table
    %
    %   LOCATION = READ_LOCATION_CSV(FILENAME) Reads data from text file
    %   FILENAME for the default selection.
    %
    %   LOCATION = READ_LOCATION_CSV(FILENAME, STARTROW, ENDROW) Reads data from
    %   rows STARTROW through ENDROW of text file FILENAME.
    %
    % Auto-generated by MATLAB on 2018/11/06 18:22:20
    
    %% Initialize variables.
    delimiter = ',';
    if nargin < 1
        filename = 'location.csv';
    end
    if nargin < 2
        startRow = 1;
        endRow = inf;
    end
    
    %% Format string for each line of text:
    %   column1: text (%s)
    %	column2: double (%f)
    %   column3: double (%f)
    %	column4: double (%f)
    %   column5: double (%f)
    %	column6: double (%f)
    %   column7: double (%f)
    %	column8: double (%f)
    %   column9: double (%f)
    %	column10: text (%s)
    %   column11: double (%f)
    %	column12: text (%s)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%s%f%f%f%f%f%f%f%f%s%f%s%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r');
    
    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this code. If
    % an error occurs for a different file, try regenerating the code from the
    % Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end
    
    %% Close the text file.
    fclose(fileID);
    
    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for unimportable
    % data, select unimportable cells in a file and regenerate the script.
    
    %% Create output variable
    location = table(dataArray{1:end-1}, 'VariableNames', {'date','hour','minute','second','accuracy','altitude','bearing','latitude','longitude','sensor_type','speed','timestamp'});
    
    %% Add some extra columns
    ec1 = rowfun(@decode_iso8601_timestamp, location, ...
        'InputVariables', {'timestamp'}, ...
        'OutputVariableNames', {'utc_timestamp', 'local_timestamp'});
    location = [location ec1];

    %% LeBill
    s1 = 'InputVariables';
    s2 = 'OutputVariableNames';
    
    ec1 = rowfun(@ (x) cellstr(datestr(x)), location, s1, 'utc_timestamp', s2, 'x');
    ec2 = rowfun(@ (x) cellstr(datestr(x)), location, s1, 'local_timestamp', s2, 'x');
    
    location.utc = ec1.x;
    location.local = ec2.x;    
    
    location = location(:, [15 16 10 8 9 6 7 11 5 1 2 3 4 12 13 14]);
end
