function battery = read_battery_txt(filename, startRow, endRow)
    %READ_BATTERY_TXT Read a battery-level file into a table
    %
    %   battery = READ_BATTERY_TXT(filename) parses a csv file into a table that
    %   contains timestamps (in MATLAB notation) and battery level (typically in
    %   range of 0.00 - 1.00).
    %
    % Auto-generated by MATLAB on 2018/11/21 13:57:01
    
    %% Initialize variables.
    delimiter = ',';
    if nargin < 2
        startRow = 1;
        endRow = inf;
    end
    
    %% Format string for each line of text:
    %   column1: double (%f)
    %	column2: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%f%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r');
    
    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this code. If
    % an error occurs for a different file, try regenerating the code from the
    % Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end
    
    %% Close the text file.
    fclose(fileID);
    
    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for unimportable
    % data, select unimportable cells in a file and regenerate the script.
    
    %% Create output variable
    battery = table(dataArray{1:end-1}, 'VariableNames', {'t','v'});
    
    %% LeBill
    date = get_sensor_stream_date(filename);

    if isempty(battery)
        battery = table(nan, nan, 'VariableNames', {'t', 'v'});
    else
        battery.t = (battery.t - battery.t(1)) / (24 * 60 * 60 * 1000) + date;
    end
end
