function liteversionlogs = read_lite_version_logs_csv(filename, startRow, endRow)
    %READ_LITE_VERSION_LOGS_CSV Read a 'lite_version_logs.csv' file into a table
    %
    %   LITEVERSIONLOGS = READ_LITE_VERSION_LOGS_CSV(FILENAME) Reads data from
    %   text file FILENAME for the default selection.
    %
    %   LITEVERSIONLOGS = READ_LITE_VERSION_LOGS_CSV(FILENAME, STARTROW, ENDROW)
    %   Reads data from rows STARTROW through ENDROW of text file FILENAME.
    %
    % Example:
    %   liteversionlogs = importfile('lite_version_logs.csv', 1, 1);
    %
    % Auto-generated by MATLAB on 2018/11/14 17:39:28
    
    %% Initialize variables.
    delimiter = ',';
    if nargin < 1
        filename = 'lite_version_logs.csv';
    end
    if nargin < 2
        startRow = 1;
        endRow = inf;
    end
    
    %% Format string for each line of text:
    %   column1: double (%f)
    %	column2: double (%f)
    %   column3: double (%f)
    %	column4: text (%s)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%f%f%s%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r');
    
    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this code. If
    % an error occurs for a different file, try regenerating the code from the
    % Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end
    
    %% Close the text file.
    fclose(fileID);
    
    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for unimportable
    % data, select unimportable cells in a file and regenerate the script.
    
    %% Create output variable
    liteversionlogs = table(dataArray{1:end-1}, 'VariableNames', {'utc_timestamp','local_timestamp','value','trigger'});
    
    %% LeBill
    s1 = 'InputVariables';
    s2 = 'OutputVariableNames';

    ec1 = rowfun(@unixt2matlab, liteversionlogs, s1, 'utc_timestamp', s2, 'x');
    ec2 = rowfun(@unixt2matlab, liteversionlogs, s1, 'local_timestamp', s2, 'x');
    
    liteversionlogs.utc_timestamp = ec1.x;
    liteversionlogs.local_timestamp = ec2.x;

    ec1 = rowfun(@ (x) cellstr(datestr(x)), liteversionlogs, s1, 'utc_timestamp', s2, 'x');
    ec2 = rowfun(@ (x) cellstr(datestr(x)), liteversionlogs, s1, 'local_timestamp', s2, 'x');
    
    liteversionlogs.utc = ec1.x;
    liteversionlogs.local= ec2.x;
    
    liteversionlogs = liteversionlogs(:, [5 6 3 4 1 2]);
end
